diff --git a/diff_output.txt b/diff_output.txt
deleted file mode 100644
index 1a8a50e..0000000
--- a/diff_output.txt
+++ /dev/null
@@ -1,493 +0,0 @@
-diff --git a/file-watcher.js b/file-watcher.js
-index cb12c6e..4c59b04 100644
---- a/file-watcher.js
-+++ b/file-watcher.js
-@@ -37,11 +37,13 @@ let memory = {
- 
- // Load memory
- const loadMemory = () => {
-+  console.log('LOAD MEMORY CALLED');
-+  console.log('Current memory state before loading:', memory);
-   try {
-     if (fs.existsSync(memoryFilePath)) {
-       const data = fs.readFileSync(memoryFilePath, 'utf-8');
-       memory = JSON.parse(data);
--      console.log('Memory loaded:', memory);
-+      console.log('Memory loaded from file:', memory);
-     } else {
-       // Initialize empty memory file if it doesn't exist
-       const initialMemory = {
-@@ -61,6 +63,7 @@ const loadMemory = () => {
-       locations: [],
-     };
-   }
-+  console.log('Final memory state after loading:', memory);
- };
- 
- // Updated saveMemory function (removed redundant directory check)
-@@ -84,6 +87,20 @@ const saveMemory = (memoryUpdate) => {
-   }
- };
- 
-+const resetMemory = () => {
-+  // Reset the memory variable to initial state
-+  memory = {
-+    characters: [],
-+    items: [],
-+    locations: [],
-+  };
-+  // Force save the empty state to file
-+  saveMemory(JSON.stringify(memory, null, 2));
-+  // Force reload the memory from file
-+  loadMemory();
-+  console.log('Memory reset to initial state');
-+};
-+
- // Process new transcription with context
- const processTranscriptionData = async (transcriptionData) => {
-   const { transcriptions, sessionId } = transcriptionData;
-@@ -176,4 +193,5 @@ const startFileWatcher = () => {
- 
- export const fileWatcher = {
-   start: startFileWatcher,
-+  resetMemory: resetMemory,
- };
-\ No newline at end of file
-diff --git a/package.json b/package.json
-index 04d6a06..75bd004 100644
---- a/package.json
-+++ b/package.json
-@@ -1,47 +1,49 @@
- {
--  "name": "mythra-web",
--  "version": "0.1.0",
--  "type": "module",
--  "private": true,
--  "scripts": {
--    "dev": "next dev",
--    "build": "next build",
--    "start": "next start",
--    "lint": "next lint"
--  },
--  "dependencies": {
--    "@ffmpeg-installer/ffmpeg": "^1.1.0",
--    "@radix-ui/react-icons": "^1.3.1",
--    "@types/express": "^5.0.0",
--    "@types/ws": "^8.5.13",
--    "axios": "^1.7.7",
--    "class-variance-authority": "^0.7.0",
--    "clsx": "^2.1.1",
--    "dotenv": "^16.4.5",
--    "express": "^4.21.1",
--    "fluent-ffmpeg": "^2.1.3",
--    "form-data": "^4.0.1",
--    "lucide-react": "^0.454.0",
--    "next": "15.0.2",
--    "node-fetch": "^2.7.0",
--    "openai": "^4.71.1",
--    "react": "19.0.0-rc-02c0e824-20241028",
--    "react-dom": "19.0.0-rc-02c0e824-20241028",
--    "shadcn-ui": "^0.9.2",
--    "socket.io": "^4.8.1",
--    "socket.io-client": "^4.8.1",
--    "tailwind-merge": "^2.5.4",
--    "ts-node": "^10.9.2",
--    "ws": "^8.18.0"
--  },
--  "devDependencies": {
--    "@types/node": "^20",
--    "@types/react": "^18",
--    "@types/react-dom": "^18",
--    "eslint": "^8",
--    "eslint-config-next": "15.0.2",
--    "postcss": "^8",
--    "tailwindcss": "^3.4.1",
--    "typescript": "^5.6.3"
-+    "name": "mythra-web",
-+    "version": "0.1.0",
-+    "type": "module",
-+    "private": true,
-+    "scripts": {
-+      "dev": "next dev",
-+      "build": "next build",
-+      "start": "next start",
-+      "lint": "next lint",
-+      "dev:server": "nodemon your-server-file.js"
-+    },
-+    "dependencies": {
-+      "@ffmpeg-installer/ffmpeg": "^1.1.0",
-+      "@radix-ui/react-icons": "^1.3.1",
-+      "@types/express": "^5.0.0",
-+      "@types/ws": "^8.5.13",
-+      "axios": "^1.7.7",
-+      "class-variance-authority": "^0.7.0",
-+      "clsx": "^2.1.1",
-+      "dotenv": "^16.4.5",
-+      "express": "^4.21.1",
-+      "fluent-ffmpeg": "^2.1.3",
-+      "form-data": "^4.0.1",
-+      "lucide-react": "^0.454.0",
-+      "next": "15.0.2",
-+      "node-fetch": "^2.7.0",
-+      "openai": "^4.71.1",
-+      "react": "19.0.0-rc-02c0e824-20241028",
-+      "react-dom": "19.0.0-rc-02c0e824-20241028",
-+      "shadcn-ui": "^0.9.2",
-+      "socket.io": "^4.8.1",
-+      "socket.io-client": "^4.8.1",
-+      "tailwind-merge": "^2.5.4",
-+      "ts-node": "^10.9.2",
-+      "ws": "^8.18.0"
-+    },
-+    "devDependencies": {
-+      "@types/node": "^20",
-+      "@types/react": "^18",
-+      "@types/react-dom": "^18",
-+      "eslint": "^8",
-+      "eslint-config-next": "15.0.2",
-+      "postcss": "^8",
-+      "tailwindcss": "^3.4.1",
-+      "typescript": "^5.6.3"
-+    }
-   }
--}
-+  
-\ No newline at end of file
-diff --git a/server.mjs b/server.mjs
-index 4744280..f519732 100644
---- a/server.mjs
-+++ b/server.mjs
-@@ -106,6 +106,17 @@ server.on('connection', (socket) => {
-         timestamp: Date.now(),
-       })
-     );
-+  } else if (message.payload.action === 'resetMemory') {
-+    console.log('Server: Processing resetMemory command...');
-+    fileWatcher.resetMemory();
-+    socket.send(JSON.stringify({
-+      type: 'status',
-+      payload: { 
-+        status: 'memoryReset',
-+        success: true 
-+      },
-+      timestamp: Date.now()
-+    })); 
-   } else if (message.payload.action === 'startRecording') {
-     console.log('Server: Processing startRecording command...');
-     if (!currentSession) {
-diff --git a/src/app/api/delete-memory-log/route.ts b/src/app/api/delete-memory-log/route.ts
-index 0c88ce8..cc11df1 100644
---- a/src/app/api/delete-memory-log/route.ts
-+++ b/src/app/api/delete-memory-log/route.ts
-@@ -1,34 +1,31 @@
-+// app/api/delete-memory-log/route.ts
- import fs from 'fs/promises';
- import path from 'path';
- 
- export async function POST() {
--  const memoryLogPath = path.join(process.cwd(), 'metadata/memory-log.txt');
--  console.log('API invoked: /api/delete-memory-log');
--  console.log('Resolved memory log path:', memoryLogPath);
--
-+  const memoryLogPath = path.join(process.cwd(), 'metadata', 'memory-log.txt');
-+  
-   try {
--    // Check if file exists
--    await fs.access(memoryLogPath);
--    console.log('File exists, attempting to delete...');
--
--    // Attempt to delete the file
--    await fs.unlink(memoryLogPath);
--    console.log('Memory log deleted successfully.');
--    return new Response(JSON.stringify({ success: true }), { status: 200 });
-+    // Create a new empty memory file
-+    const initialMemory = {
-+      characters: [],
-+      items: [],
-+      locations: [],
-+    };
-+    
-+    // Write the empty memory state
-+    await fs.writeFile(memoryLogPath, JSON.stringify(initialMemory, null, 2));
-+    console.log('Memory reset successfully');
-+    
-+    return new Response(
-+      JSON.stringify({ success: true }), 
-+      { status: 200 }
-+    );
-   } catch (error) {
--    console.error('Error during deletion:', error);
--
--    if ((error as NodeJS.ErrnoException).code === 'ENOENT') {
--      console.warn('File not found, returning success response.');
--      return new Response(
--        JSON.stringify({ success: true, message: 'File already deleted' }),
--        { status: 200 }
--      );
--    }
--
-+    console.error('Failed to reset memory:', error);
-     return new Response(
--      JSON.stringify({ error: 'Failed to delete memory log' }),
-+      JSON.stringify({ error: 'Failed to reset memory' }), 
-       { status: 500 }
-     );
-   }
--}
-+}
-\ No newline at end of file
-diff --git a/src/app/session/[sessionId]/page.tsx b/src/app/session/[sessionId]/page.tsx
-index 8b4b5b2..ec2cf46 100644
---- a/src/app/session/[sessionId]/page.tsx
-+++ b/src/app/session/[sessionId]/page.tsx
-@@ -3,14 +3,13 @@
- import { PlayCircle, StopCircle, RotateCcw, Printer } from 'lucide-react';
- import { useAudioRecorder } from '@/lib/hooks/useAudioRecorder';
- import { useState, useEffect, useCallback } from 'react';
--import { useParams, useRouter } from 'next/navigation';
-+import { useParams } from 'next/navigation';
- import TranscriptionViewer from '@/components/transcription/TranscriptionViewer';
- import ImageDisplay from '@/components/ImageDisplay';
- import { cn } from '@/lib/utils/ui';
- 
- const SessionPage = () => {
-   const params = useParams();
--  const router = useRouter();
-   const sessionIdFromUrl = params?.sessionId as string;
- 
-   const {
-@@ -22,6 +21,7 @@ const SessionPage = () => {
-     isConnected,
-     error: hookError,
-     startSession,
-+    resetMemory,
-   } = useAudioRecorder();
-   const [error, setError] = useState<string | null>(null);
-   const [isFullscreen, setIsFullscreen] = useState(false);
-@@ -36,27 +36,25 @@ const SessionPage = () => {
-   const handleRestart = useCallback(async () => {
-     try {
-       setError(null);
--
-+  
-       if (isRecording) {
-         stopRecording();
-       }
--
--      const response = await fetch('/api/delete-memory-log', { method: 'POST' });
--      if (!response.ok) {
--        throw new Error('Failed to delete memory log');
--      }
--
--      console.log('Memory log deleted successfully.');
--
-+  
-+      setError('Resetting memory...');
-+      await resetMemory();  // Use the new function
-+  
-+      setError('Starting new session...');
-       const newSessionId = await startSession();
-       if (newSessionId) {
--        router.push(`/session/${newSessionId}`);
-+        setError(null);  // Clear error message when successful
-       }
-+  
-     } catch (err) {
-       console.error('Failed to restart session:', err);
-       setError(err instanceof Error ? err.message : 'Failed to restart session');
-     }
--  }, [isRecording, stopRecording, startSession, router]);
-+  }, [isRecording, stopRecording, resetMemory, startSession]);
- 
-   const handlePrint = useCallback(() => {
-     if (!currentImageUrl) {
-diff --git a/src/components/ImageDisplay.tsx b/src/components/ImageDisplay.tsx
-index 74429fb..d16c58b 100644
---- a/src/components/ImageDisplay.tsx
-+++ b/src/components/ImageDisplay.tsx
-@@ -1,6 +1,6 @@
--// src/components/ImageDisplay.tsx
- 'use client';
- 
-+import React, { useEffect } from 'react';
- import Image from 'next/image';
- import { ChevronLeft, ChevronRight, Expand, Minimize } from 'lucide-react';
- import { useImageNavigation } from '@/lib/hooks/useImageNavigation';
-@@ -10,11 +10,11 @@ interface ImageDisplayProps {
-   isFullscreen?: boolean;
-   onToggleFullscreen?: () => void;
-   isRecording?: boolean;
--  onImageChange?: (imageUrl: string | null) => void; 
-+  onImageChange?: (imageUrl: string | null) => void;
- }
- 
--export default function ImageDisplay({ 
--  sessionId, 
-+export default function ImageDisplay({
-+  sessionId,
-   isFullscreen = false,
-   onToggleFullscreen,
-   isRecording = false,
-@@ -29,16 +29,39 @@ export default function ImageDisplay({
-     loading,
-     totalImages,
-     currentImageIndex
--  } = useImageNavigation(sessionId, onImageChange);  // Pass onImageChange here
-+  } = useImageNavigation(sessionId, onImageChange);
- 
--  // Debug logging
-- // console.log('Image Display State:', {
-- //   hasNextImage,
-- //   hasPreviousImage,
-- //   totalImages,
--//  currentImageIndex,
-- //   currentImage
-- // });
-+  // Add keyboard navigation
-+  useEffect(() => {
-+    const handleKeydown = (event: KeyboardEvent) => {
-+      if (isRecording) return;
-+
-+      switch (event.key) {
-+        case 'ArrowLeft':
-+          if (hasPreviousImage) {
-+            goToPreviousImage();
-+          }
-+          break;
-+        case 'ArrowRight':
-+          if (hasNextImage) {
-+            goToNextImage();
-+          }
-+          break;
-+        case 'Enter':
-+          if (onToggleFullscreen) {
-+            onToggleFullscreen();
-+          }
-+          break;
-+        default:
-+          break;
-+      }
-+    };
-+
-+    window.addEventListener('keydown', handleKeydown);
-+    return () => {
-+      window.removeEventListener('keydown', handleKeydown);
-+    };
-+  }, [goToNextImage, goToPreviousImage, hasNextImage, hasPreviousImage, isRecording, onToggleFullscreen]);
- 
-   if (!currentImage) {
-     return (
-@@ -56,26 +79,23 @@ export default function ImageDisplay({
-         {/* Navigation controls - only hide during recording */}
-         {!isRecording && (
-           <>
--            <button
--              onClick={goToPreviousImage}
--              className={`absolute left-4 top-1/2 -translate-y-1/2 p-2 rounded-full transition-all z-10
--                ${hasPreviousImage 
--                  ? 'bg-black/20 hover:bg-black/30 text-white cursor-pointer' 
--                  : 'bg-black/10 text-gray-400 cursor-not-allowed'}`}
--              disabled={!hasPreviousImage}
--            >
--              <ChevronLeft className="h-6 w-6" />
--            </button>
--            <button
--              onClick={goToNextImage}
--              className={`absolute right-4 top-1/2 -translate-y-1/2 p-2 rounded-full transition-all z-10
--                ${hasNextImage 
--                  ? 'bg-black/20 hover:bg-black/30 text-white cursor-pointer' 
--                  : 'bg-black/10 text-gray-400 cursor-not-allowed'}`}
--              disabled={!hasNextImage}
--            >
--              <ChevronRight className="h-6 w-6" />
--            </button>
-+            {hasPreviousImage && (
-+              <button
-+                onClick={goToPreviousImage}
-+                className="absolute left-4 top-1/2 -translate-y-1/2 p-2 rounded-full bg-black/20 hover:bg-black/30 text-white transition-all z-10"
-+              >
-+                <ChevronLeft className="h-6 w-6" />
-+              </button>
-+            )}
-+            
-+            {hasNextImage && (
-+              <button
-+                onClick={goToNextImage}
-+                className="absolute right-4 top-1/2 -translate-y-1/2 p-2 rounded-full bg-black/20 hover:bg-black/30 text-white transition-all z-10"
-+              >
-+                <ChevronRight className="h-6 w-6" />
-+              </button>
-+            )}
-           </>
-         )}
- 
-@@ -109,7 +129,7 @@ export default function ImageDisplay({
-           />
-         </div>
- 
--        {/* Image count indicator - always show when multiple images exist */}
-+        {/* Image count indicator */}
-         {totalImages > 1 && (
-           <div className="absolute bottom-4 left-1/2 -translate-x-1/2 bg-black/20 text-white px-3 py-1 rounded-full text-sm">
-             {currentImageIndex + 1} / {totalImages}
-diff --git a/src/lib/hooks/useAudioRecorder.ts b/src/lib/hooks/useAudioRecorder.ts
-index ff3bd46..52a3ff0 100644
---- a/src/lib/hooks/useAudioRecorder.ts
-+++ b/src/lib/hooks/useAudioRecorder.ts
-@@ -308,7 +308,21 @@ export function useAudioRecorder(): AudioRecorderHook {
-   }, [sessionData, sendWebSocketMessage]);
-   
-   
-+  const resetMemory = useCallback(async () => {
-+    if (!socketRef.current || socketRef.current.readyState !== WebSocket.OPEN) {
-+      throw new Error('WebSocket is not connected');
-+    }
-+  
-+    const resetMessage = {
-+      type: 'command',
-+      payload: { action: 'resetMemory' },
-+      sessionId: sessionData?.sessionId,
-+      timestamp: Date.now()
-+    };
-   
-+    socketRef.current.send(JSON.stringify(resetMessage));
-+    await new Promise(resolve => setTimeout(resolve, 1000));
-+  }, [sessionData?.sessionId]);
-   
- 
-   const endSession = useCallback(() => {
-@@ -341,5 +355,6 @@ export function useAudioRecorder(): AudioRecorderHook {
-     sessionActive,
-     sessionId: sessionData?.sessionId ?? null,
-     startSession,
-+    resetMemory,
-   };
- }
-\ No newline at end of file
-diff --git a/src/lib/types/audio.ts b/src/lib/types/audio.ts
-index d6e748e..9f4c16e 100644
---- a/src/lib/types/audio.ts
-+++ b/src/lib/types/audio.ts
-@@ -103,3 +103,10 @@ export interface AudioRecorderHook {
-   stopRecording: () => void; // Stop recording
-   endSession: () => void; // End the current session
- }
-+
-+export interface QueuedMessage {
-+  type: string;
-+  payload: {
-+    transcription?: TranscriptionData;
-+  };
-+}
-diff --git a/tsconfig.json b/tsconfig.json
-index c133409..bff9b53 100644
---- a/tsconfig.json
-+++ b/tsconfig.json
-@@ -22,6 +22,6 @@
-       "@/*": ["./src/*"]
-     }
-   },
--  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
-+  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "next.config.js"],
-   "exclude": ["node_modules"]
- }
diff --git a/file-watcher.js b/file-watcher.js
index 4c59b04..cb12c6e 100644
--- a/file-watcher.js
+++ b/file-watcher.js
@@ -37,13 +37,11 @@ let memory = {
 
 // Load memory
 const loadMemory = () => {
-  console.log('LOAD MEMORY CALLED');
-  console.log('Current memory state before loading:', memory);
   try {
     if (fs.existsSync(memoryFilePath)) {
       const data = fs.readFileSync(memoryFilePath, 'utf-8');
       memory = JSON.parse(data);
-      console.log('Memory loaded from file:', memory);
+      console.log('Memory loaded:', memory);
     } else {
       // Initialize empty memory file if it doesn't exist
       const initialMemory = {
@@ -63,7 +61,6 @@ const loadMemory = () => {
       locations: [],
     };
   }
-  console.log('Final memory state after loading:', memory);
 };
 
 // Updated saveMemory function (removed redundant directory check)
@@ -87,20 +84,6 @@ const saveMemory = (memoryUpdate) => {
   }
 };
 
-const resetMemory = () => {
-  // Reset the memory variable to initial state
-  memory = {
-    characters: [],
-    items: [],
-    locations: [],
-  };
-  // Force save the empty state to file
-  saveMemory(JSON.stringify(memory, null, 2));
-  // Force reload the memory from file
-  loadMemory();
-  console.log('Memory reset to initial state');
-};
-
 // Process new transcription with context
 const processTranscriptionData = async (transcriptionData) => {
   const { transcriptions, sessionId } = transcriptionData;
@@ -193,5 +176,4 @@ const startFileWatcher = () => {
 
 export const fileWatcher = {
   start: startFileWatcher,
-  resetMemory: resetMemory,
 };
\ No newline at end of file
diff --git a/package.json b/package.json
index 75bd004..04d6a06 100644
--- a/package.json
+++ b/package.json
@@ -1,49 +1,47 @@
 {
-    "name": "mythra-web",
-    "version": "0.1.0",
-    "type": "module",
-    "private": true,
-    "scripts": {
-      "dev": "next dev",
-      "build": "next build",
-      "start": "next start",
-      "lint": "next lint",
-      "dev:server": "nodemon your-server-file.js"
-    },
-    "dependencies": {
-      "@ffmpeg-installer/ffmpeg": "^1.1.0",
-      "@radix-ui/react-icons": "^1.3.1",
-      "@types/express": "^5.0.0",
-      "@types/ws": "^8.5.13",
-      "axios": "^1.7.7",
-      "class-variance-authority": "^0.7.0",
-      "clsx": "^2.1.1",
-      "dotenv": "^16.4.5",
-      "express": "^4.21.1",
-      "fluent-ffmpeg": "^2.1.3",
-      "form-data": "^4.0.1",
-      "lucide-react": "^0.454.0",
-      "next": "15.0.2",
-      "node-fetch": "^2.7.0",
-      "openai": "^4.71.1",
-      "react": "19.0.0-rc-02c0e824-20241028",
-      "react-dom": "19.0.0-rc-02c0e824-20241028",
-      "shadcn-ui": "^0.9.2",
-      "socket.io": "^4.8.1",
-      "socket.io-client": "^4.8.1",
-      "tailwind-merge": "^2.5.4",
-      "ts-node": "^10.9.2",
-      "ws": "^8.18.0"
-    },
-    "devDependencies": {
-      "@types/node": "^20",
-      "@types/react": "^18",
-      "@types/react-dom": "^18",
-      "eslint": "^8",
-      "eslint-config-next": "15.0.2",
-      "postcss": "^8",
-      "tailwindcss": "^3.4.1",
-      "typescript": "^5.6.3"
-    }
+  "name": "mythra-web",
+  "version": "0.1.0",
+  "type": "module",
+  "private": true,
+  "scripts": {
+    "dev": "next dev",
+    "build": "next build",
+    "start": "next start",
+    "lint": "next lint"
+  },
+  "dependencies": {
+    "@ffmpeg-installer/ffmpeg": "^1.1.0",
+    "@radix-ui/react-icons": "^1.3.1",
+    "@types/express": "^5.0.0",
+    "@types/ws": "^8.5.13",
+    "axios": "^1.7.7",
+    "class-variance-authority": "^0.7.0",
+    "clsx": "^2.1.1",
+    "dotenv": "^16.4.5",
+    "express": "^4.21.1",
+    "fluent-ffmpeg": "^2.1.3",
+    "form-data": "^4.0.1",
+    "lucide-react": "^0.454.0",
+    "next": "15.0.2",
+    "node-fetch": "^2.7.0",
+    "openai": "^4.71.1",
+    "react": "19.0.0-rc-02c0e824-20241028",
+    "react-dom": "19.0.0-rc-02c0e824-20241028",
+    "shadcn-ui": "^0.9.2",
+    "socket.io": "^4.8.1",
+    "socket.io-client": "^4.8.1",
+    "tailwind-merge": "^2.5.4",
+    "ts-node": "^10.9.2",
+    "ws": "^8.18.0"
+  },
+  "devDependencies": {
+    "@types/node": "^20",
+    "@types/react": "^18",
+    "@types/react-dom": "^18",
+    "eslint": "^8",
+    "eslint-config-next": "15.0.2",
+    "postcss": "^8",
+    "tailwindcss": "^3.4.1",
+    "typescript": "^5.6.3"
   }
-  
\ No newline at end of file
+}
diff --git a/printservice.py b/printservice.py
index 56caffd..937cc4e 100644
--- a/printservice.py
+++ b/printservice.py
@@ -1,6 +1,7 @@
 import subprocess
 import time
 import os
+import sys
 
 def push_image_to_phone(image_name):
     """
@@ -81,8 +82,16 @@ def automate_printing_workflow(image_name):
     subprocess.run(["adb", "shell", "am", "force-stop", "com.hp.impulse.panorama"], check=True)
     print("HP Sprocket app killed. Ready for the next session.")
 
-# Test script
+# Main entry point
 if __name__ == "__main__":
-    # Replace with the name of an image file in your generated_images folder
-    test_image_name = "session-1731455785816-1731455801923.png"
-    automate_printing_workflow(test_image_name)
+    # Ensure the script receives an image name as a command-line argument
+    if len(sys.argv) < 2:
+        print("Usage: python3 printservice.py <image_name>")
+        sys.exit(1)
+    
+    # Get the image name from the command-line arguments
+    image_name = sys.argv[1]
+    print(f"Image name received: {image_name}")
+
+    # Run the printing workflow
+    automate_printing_workflow(image_name)
diff --git a/server.mjs b/server.mjs
index f519732..4744280 100644
--- a/server.mjs
+++ b/server.mjs
@@ -106,17 +106,6 @@ server.on('connection', (socket) => {
         timestamp: Date.now(),
       })
     );
-  } else if (message.payload.action === 'resetMemory') {
-    console.log('Server: Processing resetMemory command...');
-    fileWatcher.resetMemory();
-    socket.send(JSON.stringify({
-      type: 'status',
-      payload: { 
-        status: 'memoryReset',
-        success: true 
-      },
-      timestamp: Date.now()
-    })); 
   } else if (message.payload.action === 'startRecording') {
     console.log('Server: Processing startRecording command...');
     if (!currentSession) {
diff --git a/src/app/api/delete-memory-log/route.ts b/src/app/api/delete-memory-log/route.ts
index cc11df1..0c88ce8 100644
--- a/src/app/api/delete-memory-log/route.ts
+++ b/src/app/api/delete-memory-log/route.ts
@@ -1,31 +1,34 @@
-// app/api/delete-memory-log/route.ts
 import fs from 'fs/promises';
 import path from 'path';
 
 export async function POST() {
-  const memoryLogPath = path.join(process.cwd(), 'metadata', 'memory-log.txt');
-  
+  const memoryLogPath = path.join(process.cwd(), 'metadata/memory-log.txt');
+  console.log('API invoked: /api/delete-memory-log');
+  console.log('Resolved memory log path:', memoryLogPath);
+
   try {
-    // Create a new empty memory file
-    const initialMemory = {
-      characters: [],
-      items: [],
-      locations: [],
-    };
-    
-    // Write the empty memory state
-    await fs.writeFile(memoryLogPath, JSON.stringify(initialMemory, null, 2));
-    console.log('Memory reset successfully');
-    
-    return new Response(
-      JSON.stringify({ success: true }), 
-      { status: 200 }
-    );
+    // Check if file exists
+    await fs.access(memoryLogPath);
+    console.log('File exists, attempting to delete...');
+
+    // Attempt to delete the file
+    await fs.unlink(memoryLogPath);
+    console.log('Memory log deleted successfully.');
+    return new Response(JSON.stringify({ success: true }), { status: 200 });
   } catch (error) {
-    console.error('Failed to reset memory:', error);
+    console.error('Error during deletion:', error);
+
+    if ((error as NodeJS.ErrnoException).code === 'ENOENT') {
+      console.warn('File not found, returning success response.');
+      return new Response(
+        JSON.stringify({ success: true, message: 'File already deleted' }),
+        { status: 200 }
+      );
+    }
+
     return new Response(
-      JSON.stringify({ error: 'Failed to reset memory' }), 
+      JSON.stringify({ error: 'Failed to delete memory log' }),
       { status: 500 }
     );
   }
-}
\ No newline at end of file
+}
diff --git a/src/app/api/print/route.ts b/src/app/api/print/route.ts
new file mode 100644
index 0000000..259b9e3
--- /dev/null
+++ b/src/app/api/print/route.ts
@@ -0,0 +1,41 @@
+import { NextResponse } from 'next/server';
+import { spawn } from 'child_process';
+
+export async function POST(request: Request) {
+  try {
+    const body = await request.json();
+    const { imageName } = body;
+
+    if (!imageName) {
+      return NextResponse.json({ error: 'Image name is required' }, { status: 400 });
+    }
+
+    return new Promise((resolve, reject) => {
+      // Spawn the Python process
+      const process = spawn('python3', ['printservice.py', imageName]);
+
+      process.stdout.on('data', (data) => {
+        console.log(`stdout: ${data}`);
+      });
+
+      process.stderr.on('data', (data) => {
+        console.error(`stderr: ${data}`);
+      });
+
+      process.on('close', (code) => {
+        if (code === 0) {
+          console.log('Python script executed successfully');
+          resolve(
+            NextResponse.json({ status: 'Print job started successfully' }, { status: 200 })
+          );
+        } else {
+          console.error(`Python script exited with code ${code}`);
+          reject(NextResponse.json({ error: 'Python script execution failed' }, { status: 500 }));
+        }
+      });
+    });
+  } catch (error) {
+    console.error('Error executing print job:', error);
+    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
+  }
+}
diff --git a/src/app/fonts.ts b/src/app/fonts.ts
new file mode 100644
index 0000000..798b0e8
--- /dev/null
+++ b/src/app/fonts.ts
@@ -0,0 +1,20 @@
+import localFont from 'next/font/local'
+
+export const obraLetra = localFont({
+  src: './fonts/ObraLetra.ttf',
+  variable: '--font-obra',
+  display: 'swap',
+})
+
+// Keep your existing fonts if you're using them
+export const geistMono = localFont({
+  src: './fonts/GeistMonoVF.woff',
+  variable: '--font-geist-mono',
+  display: 'swap',
+})
+
+export const geist = localFont({
+  src: './fonts/GeistVF.woff',
+  variable: '--font-geist',
+  display: 'swap',
+})
\ No newline at end of file
diff --git a/src/app/fonts/ObraLetra.ttf b/src/app/fonts/ObraLetra.ttf
new file mode 100644
index 0000000..2d20f5a
Binary files /dev/null and b/src/app/fonts/ObraLetra.ttf differ
diff --git a/src/app/globals.css b/src/app/globals.css
index d21d088..7d04c8e 100644
--- a/src/app/globals.css
+++ b/src/app/globals.css
@@ -2,6 +2,27 @@
 @tailwind components;
 @tailwind utilities;
 
+
+@font-face {
+  font-family: 'Obra Letra';
+  src: url('/fonts/ObraLetra.ttf') format('truetype');
+  font-weight: normal;
+  font-style: normal;
+  font-display: swap;
+}
+
+@layer base {
+  body {
+    @apply bg-gray-900 text-gray-100;
+    font-family: 'Obra Letra', system-ui, sans-serif;
+  }
+
+  /* Ensure all headings use the font */
+  h1, h2, h3, h4, h5, h6 {
+    font-family: 'Obra Letra', system-ui, sans-serif;
+  }
+}
+
 :root {
   --background: #ffffff;
   --foreground: #171717;
diff --git a/src/app/layout.tsx b/src/app/layout.tsx
index 03e4282..e0ca83c 100644
--- a/src/app/layout.tsx
+++ b/src/app/layout.tsx
@@ -2,6 +2,7 @@
 import './globals.css';
 import LayoutClient from '@/components/layout/LayoutClient';
 import type { ReactNode } from 'react';
+import { obraLetra, geist, geistMono } from './fonts';
 
 export default function RootLayout({
   children,
@@ -9,8 +10,8 @@ export default function RootLayout({
   children: ReactNode;
 }) {
   return (
-    <html lang="en">
-      <body className="bg-gray-50">
+    <html lang="en" className={`${obraLetra.variable} ${geist.variable} ${geistMono.variable}`}>
+      <body className="bg-gray-900 font-obra">
         <LayoutClient>
           {children}
         </LayoutClient>
diff --git a/src/app/page.tsx b/src/app/page.tsx
index eaf70c7..556f62c 100644
--- a/src/app/page.tsx
+++ b/src/app/page.tsx
@@ -11,11 +11,9 @@ export default function Home() {
   const handleStartSession = async () => {
     try {
       const sessionId = await startSession();
-      // Navigate to session page with the session ID
       router.push(`/session/${sessionId}`);
     } catch (err) {
       console.error('Failed to start session:', err);
-      // Optionally show error to user
     }
   };
 
@@ -23,31 +21,31 @@ export default function Home() {
     <main className="flex-1 p-6">
       <div className="max-w-7xl mx-auto space-y-8">
         <div>
-          <h2 className="text-2xl font-bold text-gray-800">Welcome to Mythra</h2>
-          <p className="text-gray-600 mt-2">Start a new session or view past recordings.</p>
+          <h2 className="text-2xl font-obra text-gray-100">Welcome to Mythra</h2>
+          <p className="text-gray-400 mt-2 font-obra">Start a new session or view past recordings.</p>
         </div>
 
         <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
           <button 
-            onClick={handleStartSession}  // Updated this line
-            className="p-8 rounded-xl border bg-white shadow-sm hover:shadow-md transition-all duration-200 hover:scale-[1.02] text-left group"
+            onClick={handleStartSession}
+            className="p-8 rounded-xl border border-gray-700 bg-gray-800/50 shadow-lg shadow-black/20 hover:shadow-xl hover:shadow-black/30 hover:bg-gray-800/80 transition-all duration-200 hover:scale-[1.02] text-left group backdrop-blur-sm"
           >
             <div className="flex items-center gap-3 mb-2">
-              <PlayCircle className="w-6 h-6 text-green-600 group-hover:scale-110 transition-transform" />
-              <h3 className="text-lg font-semibold text-gray-800">Start New Session</h3>
+              <PlayCircle className="w-6 h-6 text-emerald-400 group-hover:scale-110 transition-transform" />
+              <h3 className="text-lg font-obra text-gray-100">Start New Session</h3>
             </div>
-            <p className="text-sm text-gray-600">Begin recording a new D&D session with AI-powered visualizations.</p>
+            <p className="text-sm text-gray-400 font-obra">Begin recording a new D&D session with AI-powered visualizations.</p>
           </button>
 
           <button 
             onClick={() => router.push('/recaps')}
-            className="p-8 rounded-xl border bg-white shadow-sm hover:shadow-md transition-all duration-200 hover:scale-[1.02] text-left group"
+            className="p-8 rounded-xl border border-gray-700 bg-gray-800/50 shadow-lg shadow-black/20 hover:shadow-xl hover:shadow-black/30 hover:bg-gray-800/80 transition-all duration-200 hover:scale-[1.02] text-left group backdrop-blur-sm"
           >
             <div className="flex items-center gap-3 mb-2">
-              <Images className="w-6 h-6 text-purple-600 group-hover:scale-110 transition-transform" />
-              <h3 className="text-lg font-semibold text-gray-800">View Recaps</h3>
+              <Images className="w-6 h-6 text-blue-400 group-hover:scale-110 transition-transform" />
+              <h3 className="text-lg font-obra text-gray-100">View Recaps</h3>
             </div>
-            <p className="text-sm text-gray-600">Browse through past session recaps and generated imagery.</p>
+            <p className="text-sm text-gray-400 font-obra">Browse through past session recaps and generated imagery.</p>
           </button>
         </div>
       </div>
diff --git a/src/app/session/[sessionId]/page.tsx b/src/app/session/[sessionId]/page.tsx
index ec2cf46..8417eb2 100644
--- a/src/app/session/[sessionId]/page.tsx
+++ b/src/app/session/[sessionId]/page.tsx
@@ -3,13 +3,14 @@
 import { PlayCircle, StopCircle, RotateCcw, Printer } from 'lucide-react';
 import { useAudioRecorder } from '@/lib/hooks/useAudioRecorder';
 import { useState, useEffect, useCallback } from 'react';
-import { useParams } from 'next/navigation';
+import { useParams, useRouter } from 'next/navigation';
 import TranscriptionViewer from '@/components/transcription/TranscriptionViewer';
 import ImageDisplay from '@/components/ImageDisplay';
 import { cn } from '@/lib/utils/ui';
 
 const SessionPage = () => {
   const params = useParams();
+  const router = useRouter();
   const sessionIdFromUrl = params?.sessionId as string;
 
   const {
@@ -21,11 +22,13 @@ const SessionPage = () => {
     isConnected,
     error: hookError,
     startSession,
-    resetMemory,
   } = useAudioRecorder();
   const [error, setError] = useState<string | null>(null);
   const [isFullscreen, setIsFullscreen] = useState(false);
   const [currentImageUrl, setCurrentImageUrl] = useState<string | null>(null);
+  const [isPrinting, setIsPrinting] = useState(false); // Add this here
+  const [progress, setProgress] = useState(0); // Progress bar state
+
 
    // Add the debug useEffect here
    useEffect(() => {
@@ -36,77 +39,69 @@ const SessionPage = () => {
   const handleRestart = useCallback(async () => {
     try {
       setError(null);
-  
+
       if (isRecording) {
         stopRecording();
       }
-  
-      setError('Resetting memory...');
-      await resetMemory();  // Use the new function
-  
-      setError('Starting new session...');
+
+      const response = await fetch('/api/delete-memory-log', { method: 'POST' });
+      if (!response.ok) {
+        throw new Error('Failed to delete memory log');
+      }
+
+      console.log('Memory log deleted successfully.');
+
       const newSessionId = await startSession();
       if (newSessionId) {
-        setError(null);  // Clear error message when successful
+        router.push(`/session/${newSessionId}`);
       }
-  
     } catch (err) {
       console.error('Failed to restart session:', err);
       setError(err instanceof Error ? err.message : 'Failed to restart session');
     }
-  }, [isRecording, stopRecording, resetMemory, startSession]);
+  }, [isRecording, stopRecording, startSession, router]);
 
-  const handlePrint = useCallback(() => {
+  const handlePrint = useCallback(async () => {
     if (!currentImageUrl) {
       console.error('No image available to print');
       return;
     }
   
-    const imageUrl = `http://localhost:3001${currentImageUrl}`;
-    const printWindow = window.open('', '_blank');
-    
-    if (printWindow) {
-      printWindow.document.write(`
-        <!DOCTYPE html>
-        <html>
-          <head>
-            <title>Print Image</title>
-            <style>
-              @page {
-                size: 2in 3in;
-                margin: 0;
-              }
-              body {
-                margin: 0;
-                padding: 0;
-                background: black;
-              }
-              img {
-                width: 2in;
-                height: 3in;
-                object-fit: cover;
-                display: block;
-              }
-              @media print {
-                body { background: none; }
-              }
-            </style>
-          </head>
-          <body>
-            <img src="${imageUrl}" onload="setTimeout(window.print, 500)">
-            <script>
-              window.addEventListener('afterprint', function() {
-                window.close();
-              });
-            </script>
-          </body>
-        </html>
-      `);
-      printWindow.document.close();
-    } else {
-      console.error('Failed to open the print window');
+    setError(null);
+    setIsPrinting(true);
+    setProgress(0);
+  
+    const imageName = currentImageUrl.split('/').pop();
+  
+    // Start the progress bar independently
+    const progressInterval = setInterval(() => {
+      setProgress((prev) => (prev < 100 ? prev + 1 : 100));
+    }, 600); // Update every 0.6 seconds for 60 seconds (or adjust as needed)
+  
+    try {
+      const response = await fetch('/api/print', {
+        method: 'POST',
+        headers: {
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify({ imageName }),
+      });
+  
+      if (!response.ok) {
+        throw new Error('Failed to start print job');
+      }
+  
+      const result = await response.json();
+      console.log('Print job started:', result);
+    } catch (error) {
+      console.error('Error starting print job:', error);
+      setError('Failed to print image. Please try again.');
+    } finally {
+      clearInterval(progressInterval); // Stop the progress bar updates
+      setProgress(100); // Ensure the progress bar completes
+      setTimeout(() => setIsPrinting(false), 1000); // Allow the progress bar to complete visually before hiding the overlay
     }
-  }, [currentImageUrl]);
+  }, [currentImageUrl]);  
 
   const toggleRecording = useCallback(() => {
     if (isRecording) {
@@ -156,13 +151,27 @@ const SessionPage = () => {
   }, [sessionIdFromUrl, sessionData, startSession]);
 
   return (
-    <main className="h-screen w-full bg-gray-50 overflow-hidden">
+    <main className="h-screen w-full bg-gray-900 overflow-hidden">
+      {/* Printing in Progress Overlay */}
+      {isPrinting && (
+        <div className="absolute inset-0 z-50 flex flex-col items-center justify-center bg-black/75 text-white text-lg">
+          <p>Printing in progress. Please wait...</p>
+          <div className="w-3/4 mt-4 h-4 bg-gray-700 rounded">
+            <div
+              className="h-4 bg-green-500 rounded"
+              style={{ width: `${progress}%` }}
+            ></div>
+          </div>
+        </div>
+      )}
+  
+      {/* Error Message */}
       {error || hookError ? (
-        <div className="absolute top-4 left-1/2 -translate-x-1/2 z-50 rounded-lg bg-red-50 p-4 text-red-700 text-sm">
+        <div className="absolute top-4 left-1/2 -translate-x-1/2 z-50 rounded-lg bg-red-900/50 p-4 text-red-200 text-sm">
           {error || hookError}
         </div>
       ) : null}
-
+  
       <div className="flex h-full">
         <div
           className={cn(
@@ -171,18 +180,20 @@ const SessionPage = () => {
           )}
         >
           <div className="h-full overflow-auto p-4 space-y-4">
-            <h2 className="text-2xl font-bold text-gray-800">Session Recording</h2>
-            <p className="text-gray-600 mt-2">Control and manage your D&D session recordings.</p>
-
+            <h2 className="text-2xl font-obra text-gray-100">Session Recording</h2>
+            <p className="text-gray-400 mt-2 font-obra">
+              Control and manage your D&D session recordings.
+            </p>
+  
             <div className="flex items-center space-x-4">
               <button
                 onClick={toggleRecording}
                 disabled={!isConnected}
                 className={cn(
-                  "p-4 rounded-lg text-white transition-all",
-                  isRecording 
-                    ? "bg-red-600 hover:bg-red-700" 
-                    : "bg-green-600 hover:bg-green-700"
+                  'p-4 rounded-lg text-white transition-all',
+                  isRecording
+                    ? 'bg-red-700 hover:bg-red-800'
+                    : 'bg-green-700 hover:bg-green-800'
                 )}
               >
                 {isRecording ? (
@@ -199,21 +210,21 @@ const SessionPage = () => {
               </button>
               <button
                 onClick={handleRestart}
-                className="p-4 rounded-lg bg-yellow-600 text-white hover:bg-yellow-700 transition-all"
+                className="p-4 rounded-lg bg-yellow-700 text-white hover:bg-yellow-800 transition-all"
               >
                 <RotateCcw className="w-6 h-6 inline-block mr-2" />
                 Restart Session
               </button>
               <button
                 onClick={handlePrint}
-                disabled={!currentImageUrl}
-                className="p-4 rounded-lg bg-blue-600 text-white hover:bg-blue-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
+                disabled={!currentImageUrl || isPrinting}
+                className="p-4 rounded-lg bg-blue-700 text-white hover:bg-blue-800 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
               >
                 <Printer className="w-6 h-6 inline-block mr-2" />
-                Print Image
+                {isPrinting ? 'Printing...' : 'Print Image'}
               </button>
             </div>
-
+  
             <TranscriptionViewer
               sessionId={sessionData?.sessionId || ''}
               isRecording={isRecording}
@@ -222,7 +233,7 @@ const SessionPage = () => {
             />
           </div>
         </div>
-
+  
         <div
           className={cn(
             'transition-all duration-300 ease-in-out',
diff --git a/src/components/ImageDisplay.tsx b/src/components/ImageDisplay.tsx
index d16c58b..fce8770 100644
--- a/src/components/ImageDisplay.tsx
+++ b/src/components/ImageDisplay.tsx
@@ -65,8 +65,8 @@ export default function ImageDisplay({
 
   if (!currentImage) {
     return (
-      <div className="flex h-full items-center justify-center bg-gray-900 m-4 rounded-lg">
-        <div className={`text-white ${loading ? 'animate-pulse' : ''}`}>
+      <div className="flex h-full items-center justify-center bg-gray-900 rounded-lg">
+        <div className={`text-gray-300 ${loading ? 'animate-pulse' : ''}`}>
           {loading ? 'Generating scene...' : 'No images available'}
         </div>
       </div>
@@ -82,7 +82,7 @@ export default function ImageDisplay({
             {hasPreviousImage && (
               <button
                 onClick={goToPreviousImage}
-                className="absolute left-4 top-1/2 -translate-y-1/2 p-2 rounded-full bg-black/20 hover:bg-black/30 text-white transition-all z-10"
+                className="absolute left-4 top-1/2 -translate-y-1/2 p-2 rounded-full bg-gray-900/50 hover:bg-gray-900/75 text-white transition-all z-10"
               >
                 <ChevronLeft className="h-6 w-6" />
               </button>
@@ -91,7 +91,7 @@ export default function ImageDisplay({
             {hasNextImage && (
               <button
                 onClick={goToNextImage}
-                className="absolute right-4 top-1/2 -translate-y-1/2 p-2 rounded-full bg-black/20 hover:bg-black/30 text-white transition-all z-10"
+                className="absolute right-4 top-1/2 -translate-y-1/2 p-2 rounded-full bg-gray-900/50 hover:bg-gray-900/75 text-white transition-all z-10"
               >
                 <ChevronRight className="h-6 w-6" />
               </button>
@@ -103,7 +103,7 @@ export default function ImageDisplay({
         {onToggleFullscreen && (
           <button
             onClick={onToggleFullscreen}
-            className="absolute top-4 right-4 p-2 rounded-lg bg-black/20 hover:bg-black/30 text-white transition-all z-10"
+            className="absolute top-4 right-4 p-2 rounded-lg bg-gray-900/50 hover:bg-gray-900/75 text-white transition-all z-10"
           >
             {isFullscreen ? (
               <Minimize className="h-5 w-5" />
@@ -115,7 +115,7 @@ export default function ImageDisplay({
 
         {/* Image */}
         <div className={`relative w-full h-full transition-all duration-300 ${
-          isFullscreen ? "scale-100" : "scale-95"
+          isFullscreen ? "scale-100" : "scale-95 hover:scale-100"
         }`}>
           <Image
             src={`http://localhost:3001${currentImage}`}
@@ -131,7 +131,7 @@ export default function ImageDisplay({
 
         {/* Image count indicator */}
         {totalImages > 1 && (
-          <div className="absolute bottom-4 left-1/2 -translate-x-1/2 bg-black/20 text-white px-3 py-1 rounded-full text-sm">
+          <div className="absolute bottom-4 left-1/2 -translate-x-1/2 bg-gray-900/50 text-white px-3 py-1 rounded-full text-sm">
             {currentImageIndex + 1} / {totalImages}
           </div>
         )}
diff --git a/src/components/layout/Footer.tsx b/src/components/layout/Footer.tsx
index a4bcf66..f82a23b 100644
--- a/src/components/layout/Footer.tsx
+++ b/src/components/layout/Footer.tsx
@@ -20,24 +20,23 @@ export default function Footer() {
     return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
   };
 
-  // Only show session info on session page
   const showSessionInfo = pathname === '/session';
 
   return (
-    <footer className="border-t bg-white/50 backdrop-blur-sm">
+    <footer className="border-t border-gray-700 bg-gray-900/80 backdrop-blur-sm">
       <div className="px-8 py-4 flex justify-between items-center">
         <div className="flex items-center gap-4">
           {/* Connection Status */}
           <div className="flex items-center gap-2 text-sm">
             {isConnected ? (
               <>
-                <Wifi className="w-4 h-4 text-green-500" />
-                <span className="text-green-600">Connected</span>
+                <Wifi className="w-4 h-4 text-emerald-400" />
+                <span className="text-emerald-400">Connected</span>
               </>
             ) : (
               <>
-                <WifiOff className="w-4 h-4 text-yellow-500 animate-pulse" />
-                <span className="text-yellow-600">Connecting...</span>
+                <WifiOff className="w-4 h-4 text-amber-400 animate-pulse" />
+                <span className="text-amber-400">Connecting...</span>
               </>
             )}
           </div>
@@ -45,11 +44,11 @@ export default function Footer() {
           {/* Recording Status - Only show on session page */}
           {showSessionInfo && sessionData?.status && (
             <div className="flex items-center gap-2 text-sm">
-              <div className="w-px h-4 bg-gray-300" /> {/* Divider */}
-              <Mic className={`w-4 h-4 ${isRecording ? 'text-red-500 animate-pulse' : 'text-gray-500'}`} />
-              <span className="capitalize text-gray-600">{sessionData.status}</span>
+              <div className="w-px h-4 bg-gray-700" /> {/* Divider */}
+              <Mic className={`w-4 h-4 ${isRecording ? 'text-red-400 animate-pulse' : 'text-gray-400'}`} />
+              <span className="capitalize text-gray-300">{sessionData.status}</span>
               {isRecording && sessionData.totalDuration > 0 && (
-                <span className="text-gray-600">{formatDuration(sessionData.totalDuration)}</span>
+                <span className="text-gray-300">{formatDuration(sessionData.totalDuration)}</span>
               )}
             </div>
           )}
@@ -57,8 +56,8 @@ export default function Footer() {
           {/* Show session ID if available */}
           {showSessionInfo && sessionData?.sessionId && (
             <div className="flex items-center gap-2 text-sm">
-              <div className="w-px h-4 bg-gray-300" /> {/* Divider */}
-              <span className="text-gray-600">Session: {sessionData.sessionId}</span>
+              <div className="w-px h-4 bg-gray-700" /> {/* Divider */}
+              <span className="text-gray-400">Session: {sessionData.sessionId}</span>
             </div>
           )}
         </div>
diff --git a/src/components/layout/Header.tsx b/src/components/layout/Header.tsx
index 6f013a8..4d70f7d 100644
--- a/src/components/layout/Header.tsx
+++ b/src/components/layout/Header.tsx
@@ -8,36 +8,36 @@ export default function Header() {
   const router = useRouter();
 
   return (
-    <header className="border-b bg-white/50 backdrop-blur-sm sticky top-0 z-10">
+    <header className="border-b border-gray-700 bg-gray-900/80 backdrop-blur-sm sticky top-0 z-10">
       <div className="flex items-center justify-between h-16 px-8">
         <div className="flex items-center space-x-4">
           <h1 
             onClick={() => router.push('/')} 
-            className="text-xl font-bold text-blue-600 cursor-pointer"
+            className="text-xl font-obra text-blue-400 hover:text-blue-300 cursor-pointer transition-colors"
           >
             Mythra
           </h1>
           <nav className="hidden md:flex space-x-6">
             <button 
               onClick={() => router.push('/session')}
-              className={`text-sm font-medium transition-colors flex items-center gap-2 
-                ${pathname === '/session' ? 'text-blue-600' : 'text-gray-600 hover:text-blue-600'}`}
+              className={`text-sm font-obra transition-colors flex items-center gap-2 
+                ${pathname === '/session' ? 'text-blue-400' : 'text-gray-400 hover:text-blue-400'}`}
             >
               <Mic className="w-4 h-4" />
               Session
             </button>
             <button 
               onClick={() => router.push('/memory')}
-              className={`text-sm font-medium transition-colors flex items-center gap-2 
-                ${pathname === '/memory' ? 'text-blue-600' : 'text-gray-600 hover:text-blue-600'}`}
+              className={`text-sm font-obra transition-colors flex items-center gap-2 
+                ${pathname === '/memory' ? 'text-blue-400' : 'text-gray-400 hover:text-blue-400'}`}
             >
               <Brain className="w-4 h-4" />
               Memory
             </button>
             <button 
               onClick={() => router.push('/recaps')}
-              className={`text-sm font-medium transition-colors flex items-center gap-2 
-                ${pathname === '/recaps' ? 'text-blue-600' : 'text-gray-600 hover:text-blue-600'}`}
+              className={`text-sm font-obra transition-colors flex items-center gap-2 
+                ${pathname === '/recaps' ? 'text-blue-400' : 'text-gray-400 hover:text-blue-400'}`}
             >
               <Book className="w-4 h-4" />
               Recaps
diff --git a/src/components/transcription/TranscriptionViewer.tsx b/src/components/transcription/TranscriptionViewer.tsx
index b35ada1..0114166 100644
--- a/src/components/transcription/TranscriptionViewer.tsx
+++ b/src/components/transcription/TranscriptionViewer.tsx
@@ -65,41 +65,33 @@ export default function TranscriptionViewer({
   };
 
   if (!transcriptions?.length) {
-    console.log('TranscriptionViewer: No transcriptions to display:', {
-      isRecording,
-      sessionActive,
-      transcriptionsState: transcriptions
-    });
     return (
-      <Card>
-        <div className="rounded-lg bg-gray-50 p-8 text-center text-gray-500">
+      <Card className="bg-gray-900 border-gray-700">
+        <div className="rounded-lg bg-gray-900 p-8 text-center text-gray-400">
           {isRecording ? (
             <div className="flex items-center justify-center gap-2">
               <div className="h-2 w-2 rounded-full bg-red-500 animate-pulse" />
               <p>Waiting for transcription...</p>
             </div>
           ) : (
-            <p>No transcriptions available</p>
+            <div className="flex flex-col gap-2">
+              <p>No transcriptions available</p>
+              <div className="text-sm text-gray-500">Session: {sessionId}</div>
+            </div>
           )}
         </div>
       </Card>
     );
   }
 
-  console.log('TranscriptionViewer: Rendering transcriptions:', {
-    count: transcriptions.length,
-    latest: transcriptions[transcriptions.length - 1],
-    allTexts: transcriptions.map(t => t.text.substring(0, 50) + '...')
-  });
-
   return (
-    <Card>
-      <div className="border-b px-4 py-3 flex items-center justify-between">
-        <h3 className="font-medium text-gray-900">Session Transcription</h3>
+    <Card className="bg-gray-900 border-gray-700">
+      <div className="border-b border-gray-700 px-4 py-3 flex items-center justify-between bg-gray-900">
+        <h3 className="font-medium text-gray-200">Session Transcription</h3>
         <div className="flex items-center gap-4">
-          <span className="text-sm text-gray-500">Session: {sessionId}</span>
+          <span className="text-sm text-gray-400">Session: {sessionId}</span>
           {isRecording && (
-            <div className="flex items-center gap-2 text-sm text-red-600">
+            <div className="flex items-center gap-2 text-sm text-red-400">
               <div className="h-2 w-2 rounded-full bg-red-500 animate-pulse" />
               Recording
             </div>
@@ -109,30 +101,22 @@ export default function TranscriptionViewer({
 
       <div 
         ref={containerRef} 
-        className="max-h-[500px] overflow-y-auto p-4 space-y-4 bg-gray-50"
+        className="max-h-[500px] overflow-y-auto p-4 space-y-4 bg-gray-900"
       >
-        {transcriptions.map((transcription, index) => {
-          console.log('TranscriptionViewer: Rendering item:', {
-            index,
-            timestamp: transcription.timestamp,
-            textPreview: transcription.text?.substring(0, 50) + '...'
-          });
-
-          return (
-            <div 
-              key={`${transcription.timestamp}-${index}`}
-              className="flex gap-3 group hover:bg-gray-50 p-2 rounded-lg"
-            >
-              <div className="flex items-center gap-2 text-sm text-gray-500">
-                <Clock className="w-4 h-4" />
-                <span>{formatTimestamp(transcription.timestamp)}</span>
-              </div>
-              <p className="flex-1 text-gray-800 whitespace-pre-wrap">
-                {transcription.text}
-              </p>
+        {transcriptions.map((transcription, index) => (
+          <div 
+            key={`${transcription.timestamp}-${index}`}
+            className="flex gap-3 group hover:bg-gray-800 p-2 rounded-lg transition-colors"
+          >
+            <div className="flex items-center gap-2 text-sm text-gray-400">
+              <Clock className="w-4 h-4" />
+              <span>{formatTimestamp(transcription.timestamp)}</span>
             </div>
-          );
-        })}
+            <p className="flex-1 text-gray-300 whitespace-pre-wrap">
+              {transcription.text}
+            </p>
+          </div>
+        ))}
       </div>
     </Card>
   );
diff --git a/src/lib/hooks/useAudioRecorder.ts b/src/lib/hooks/useAudioRecorder.ts
index 52a3ff0..ff3bd46 100644
--- a/src/lib/hooks/useAudioRecorder.ts
+++ b/src/lib/hooks/useAudioRecorder.ts
@@ -308,21 +308,7 @@ export function useAudioRecorder(): AudioRecorderHook {
   }, [sessionData, sendWebSocketMessage]);
   
   
-  const resetMemory = useCallback(async () => {
-    if (!socketRef.current || socketRef.current.readyState !== WebSocket.OPEN) {
-      throw new Error('WebSocket is not connected');
-    }
-  
-    const resetMessage = {
-      type: 'command',
-      payload: { action: 'resetMemory' },
-      sessionId: sessionData?.sessionId,
-      timestamp: Date.now()
-    };
   
-    socketRef.current.send(JSON.stringify(resetMessage));
-    await new Promise(resolve => setTimeout(resolve, 1000));
-  }, [sessionData?.sessionId]);
   
 
   const endSession = useCallback(() => {
@@ -355,6 +341,5 @@ export function useAudioRecorder(): AudioRecorderHook {
     sessionActive,
     sessionId: sessionData?.sessionId ?? null,
     startSession,
-    resetMemory,
   };
 }
\ No newline at end of file
diff --git a/src/lib/types/audio.ts b/src/lib/types/audio.ts
index 5504400..d6e748e 100644
--- a/src/lib/types/audio.ts
+++ b/src/lib/types/audio.ts
@@ -102,12 +102,4 @@ export interface AudioRecorderHook {
   startRecording: () => Promise<void>; // Start recording
   stopRecording: () => void; // Stop recording
   endSession: () => void; // End the current session
-  resetMemory: () => Promise<void>; // Add resetMemory here
-}
-
-export interface QueuedMessage {
-  type: string;
-  payload: {
-    transcription?: TranscriptionData;
-  };
 }
diff --git a/tailwind.config.ts b/tailwind.config.ts
index face1e2..30dba90 100644
--- a/tailwind.config.ts
+++ b/tailwind.config.ts
@@ -1,4 +1,3 @@
-// tailwind.config.ts
 import type { Config } from 'tailwindcss'
 
 const config: Config = {
@@ -8,7 +7,13 @@ const config: Config = {
     './src/app/**/*.{js,ts,jsx,tsx,mdx}',
   ],
   theme: {
-    extend: {},
+    extend: {
+      fontFamily: {
+        obra: ['var(--font-obra)'],
+        geist: ['var(--font-geist)'],
+        'geist-mono': ['var(--font-geist-mono)'],
+      },
+    },
   },
   plugins: [],
 }
diff --git a/tsconfig.json b/tsconfig.json
index bff9b53..c133409 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -22,6 +22,6 @@
       "@/*": ["./src/*"]
     }
   },
-  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "next.config.js"],
+  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
   "exclude": ["node_modules"]
 }
